name: CI

on:
  push:
  pull_request:

jobs:
  lint:
    name: Run Linter (Code Style Check)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install black isort flake8

      # pyproject.toml과 .flake8 설정 파일이 존재하는지 확인
      - name: Debug pyproject.toml
        run: cat pyproject.toml || echo "pyproject.toml not found"

      - name: Debug .flake8
        run: cat .flake8 || echo ".flake8 not found"

      # black 실행
      - name: Run black (Code Formatting Check)
        run: black --check .

      # isort 실행
      - name: Run isort (Import Sorting Check)
        run: isort . --check-only

      # flake8 실행
      - name: Run flake8 (Python Lint)
        run: flake8 --config .flake8

  test:
    name: Run Django Tests (SQLite)
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> $GITHUB_ENV
          echo "DEBUG=${{ secrets.DEBUG }}" >> $GITHUB_ENV
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> $GITHUB_ENV
          echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "REDIS_URL=redis://127.0.0.1:6379/0" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> $GITHUB_ENV
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> $GITHUB_ENV
          echo "KAKAO_SECRET=${{ secrets.KAKAO_SECRET }}" >> $GITHUB_ENV
          echo "FRONTEND_DEV_URL=${{ secrets.FRONTEND_DEV_URL }}" >> $GITHUB_ENV
          echo "FRONTEND_PROD_URL=${{ secrets.FRONTEND_PROD_URL }}" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "GOV24_API_KEY=${{ secrets.GOV24_API_KEY }}" >> $GITHUB_ENV
          echo "YOUTH_POLICY_API_KEY=${{ secrets.YOUTH_POLICY_API_KEY }}" >> $GITHUB_ENV
          echo "EMPLOYMENT_API_KEY=${{ secrets.EMPLOYMENT_API_KEY }}" >> $GITHUB_ENV
          echo "PDF_PATH=${{ secrets.PDF_PATH }}" >> $GITHUB_ENV
          echo "CHROMA_DB_DIR=${{ secrets.CHROMA_DB_DIR }}" >> $GITHUB_ENV
          echo "DEFAULT_PERMISSION_CLASSES=${{ secrets.DEFAULT_PERMISSION_CLASSES }}" >> $GITHUB_ENV
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> $GITHUB_ENV
          echo "EMAIL_ID=${{ secrets.EMAIL_ID }}" >> $GITHUB_ENV
          echo "EMAIL_APP_PW=${{ secrets.EMAIL_APP_PW }}" >> $GITHUB_ENV
          echo "TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" >> $GITHUB_ENV
          echo "SEOUL_API_KEY=${{ secrets.SEOUL_API_KEY }}" >> $GITHUB_ENV

      - name: Set up Django test database
        env:
          DJANGO_SETTINGS_MODULE: config.settings
        run: |
          python manage.py migrate --noinput

      - name: Run tests
        env:
          DJANGO_SETTINGS_MODULE: config.settings
        run: |
          python manage.py test
